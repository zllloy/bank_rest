openapi: 3.0.1
info:
  title: Spring Data REST API
  version: 1.0.0
servers:
- url: http://localhost:8089
  description: Generated server url
paths:
  /api/v1/users:
    get:
      tags:
      - user-controller
      operationId: getAllUsers
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      tags:
      - user-controller
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
  /api/v1/requestsToBlock/cards:
    get:
      tags:
      - request-to-block-controller
      operationId: getRequestsToBlockCards
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RequestsToBlockCardsDto"
    post:
      tags:
      - request-to-block-controller
      operationId: sendRequestsToBlockCards
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlockCardRequestUser"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/RequestsToBlockCardsDto"
  /api/v1/cards:
    get:
      tags:
      - cards-controller
      operationId: getAllCards
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CardDto"
    post:
      tags:
      - cards-controller
      operationId: createCard
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardCreateRequestDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardDto"
  /api/v1/cards/transfer:
    post:
      tags:
      - cards-controller
      operationId: transfer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferBetweenCardsDto"
        required: true
      responses:
        "200":
          description: OK
  /api/v1/auth/sign-up:
    post:
      tags:
      - auth-controller
      summary: Регистрация пользователя
      operationId: signUp
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpRequestDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/JwtAuthenticationResponseDto"
  /api/v1/auth/sign-in:
    post:
      tags:
      - auth-controller
      summary: Авторизация пользователя
      operationId: signIn
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignInRequestDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/JwtAuthenticationResponseDto"
  /api/v1/users/{id}/unlock:
    patch:
      tags:
      - user-controller
      operationId: unlockUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
  /api/v1/users/{id}/block:
    patch:
      tags:
      - user-controller
      operationId: blockUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
  /api/v1/cards/{id}/status:
    patch:
      tags:
      - cards-controller
      operationId: updateCardStatus
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardStatusUpdateRequestDto"
        required: true
      responses:
        "200":
          description: OK
  /api/v1/cards/{id}:
    get:
      tags:
      - cards-controller
      operationId: getCard
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardDto"
    delete:
      tags:
      - cards-controller
      operationId: deleteCard
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/v1/cards/user/{userId}/cards:
    get:
      tags:
      - cards-controller
      operationId: getUserCards
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: search
        in: query
        required: false
        schema:
          type: string
      - name: status
        in: query
        required: false
        schema:
          type: string
          enum:
          - ACTIVE
          - BLOCKED
          - EXPIRED
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageCardDto"
  /api/v1/cards/my-cards:
    get:
      tags:
      - cards-controller
      operationId: getMyCards
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: search
        in: query
        required: false
        schema:
          type: string
      - name: status
        in: query
        required: false
        schema:
          type: string
          enum:
          - ACTIVE
          - BLOCKED
          - EXPIRED
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageCardDto"
  /api/v1/cards/balance:
    get:
      tags:
      - cards-controller
      operationId: getBalance
      parameters:
      - name: id
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/GetBalanceCard"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: number
  /api/v1/users/{id}:
    delete:
      tags:
      - user-controller
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
components:
  schemas:
    UserDto:
      required:
      - email
      - password
      - username
      type: object
      properties:
        username:
          maxLength: 30
          minLength: 3
          type: string
        email:
          type: string
        password:
          maxLength: 50
          minLength: 6
          type: string
    GrantedAuthority:
      type: object
      properties:
        authority:
          type: string
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
        roleName:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        username:
          type: string
        password:
          type: string
        enabled:
          type: boolean
        role:
          $ref: "#/components/schemas/Role"
        authorities:
          type: array
          items:
            $ref: "#/components/schemas/GrantedAuthority"
        accountNonLocked:
          type: boolean
        accountNonExpired:
          type: boolean
        credentialsNonExpired:
          type: boolean
    BlockCardRequestUser:
      required:
      - id
      type: object
      properties:
        id:
          minimum: 1
          type: integer
          format: int64
    RequestBlockCardDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        maskedNumber:
          type: string
        balance:
          type: number
        status:
          type: string
          enum:
          - ACTIVE
          - BLOCKED
          - EXPIRED
    RequestBlockUserDto:
      type: object
      properties:
        username:
          type: string
    RequestsToBlockCardsDto:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/RequestBlockUserDto"
        card:
          $ref: "#/components/schemas/RequestBlockCardDto"
    CardCreateRequestDto:
      required:
      - cardNumber
      - expirationDate
      - ownerId
      type: object
      properties:
        cardNumber:
          pattern: "\\d{16}"
          type: string
        ownerId:
          minimum: 1
          type: integer
          format: int32
        expirationDate:
          type: string
          format: date
    CardDto:
      required:
      - maskedNumber
      - ownerId
      - status
      - validityPeriod
      type: object
      properties:
        maskedNumber:
          maxLength: 16
          minLength: 16
          type: string
        ownerId:
          minimum: 1
          type: integer
          format: int64
        validityPeriod:
          type: string
          format: date
        status:
          type: string
          enum:
          - ACTIVE
          - BLOCKED
          - EXPIRED
        balance:
          type: number
    TransferBetweenCardsDto:
      required:
      - amount
      - fromCardId
      - toCardId
      type: object
      properties:
        fromCardId:
          minimum: 1
          type: integer
          format: int64
        toCardId:
          minimum: 1
          type: integer
          format: int64
        amount:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
    SignUpRequestDto:
      required:
      - email
      - username
      type: object
      properties:
        username:
          maxLength: 50
          minLength: 5
          type: string
          description: Имя пользователя
          example: Jon
        email:
          maxLength: 255
          minLength: 5
          type: string
          description: Адрес электронной почты
          example: jondoe@gmail.com
        password:
          maxLength: 255
          minLength: 0
          type: string
          description: Пароль
          example: my_1secret1_password
      description: Запрос на регистрацию
    JwtAuthenticationResponseDto:
      type: object
      properties:
        token:
          type: string
          description: Токен доступа
          example: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTYyMjUwNj...
      description: Ответ c токеном доступа
    SignInRequestDto:
      required:
      - password
      - username
      type: object
      properties:
        username:
          maxLength: 50
          minLength: 5
          type: string
          description: Имя пользователя
          example: Jon
        password:
          maxLength: 255
          minLength: 3
          type: string
          description: Пароль
          example: my_1secret1_password
      description: Запрос на аутентификацию
    CardStatusUpdateRequestDto:
      required:
      - status
      type: object
      properties:
        status:
          type: string
    PageCardDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/CardDto"
        number:
          type: integer
          format: int32
        sort:
          type: array
          items:
            $ref: "#/components/schemas/SortObject"
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: "#/components/schemas/PageableObject"
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          type: array
          items:
            $ref: "#/components/schemas/SortObject"
        pageSize:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        unpaged:
          type: boolean
        paged:
          type: boolean
    SortObject:
      type: object
      properties:
        direction:
          type: string
        nullHandling:
          type: string
        ascending:
          type: boolean
        property:
          type: string
        ignoreCase:
          type: boolean
    GetBalanceCard:
      required:
      - id
      type: object
      properties:
        id:
          minimum: 1
          type: integer
          format: int64
